{"version":3,"sources":["serviceWorker.ts","components/CopyButton.tsx","state/hooks.ts","state/globalSlice.ts","PortfolioSection/ContactSection.tsx","data/tool_logos/index.ts","data/tool_logos/ds.png","data/tool_logos/js.png","data/tool_logos/mc.png","data/tool_logos/mtg.png","components/ToolCard.tsx","data/project_images/index.ts","data/project_images/immunity.png","data/project_images/mtgcr.png","data/project_images/musiq.png","data/project_images/zps2020.png","components/ProjectInfo.tsx","components/ProjectCard.tsx","PortfolioSection/PortfolioSection.tsx","tex/dakotamaddenfong_resume.pdf","pages/MainPage.tsx","Navigation.ts","components/helpers.tsx","components/Header.tsx","components/MenuDrawer.tsx","App.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","useStyles","makeStyles","theme","root","icon","marginRight","CopyButton","props","classes","tooltipTimer","useRef","useState","tooltipOpen","setTooltipOpen","displayTooltip","current","clearTimeout","setTimeout","Tooltip","title","arrow","open","Button","onClick","navigator","clipboard","writeText","contents","then","style","textTransform","variant","size","color","className","useAppDispatch","useDispatch","useAppSelector","useSelector","initialState","darkMode","localStorage","getItem","menuDrawerOpen","globalSlice","createSlice","name","reducers","toggleDarkMode","state","setItem","openMenuDrawer","closeMenuDrawer","actions","selectDarkMode","global","selectMenuDrawerOpen","paddingTop","contactbuttons","marginTop","ContactSection","Typography","id","ButtonGroup","orientation","MailOutline","CallOutlined","toolLogos","ds","js","mc","mtg","card","maxWidth","avatar","marginBottom","ToolCard","fullLink","general","page","info","link","Grid","item","xs","sm","md","lg","Card","raised","CardActionArea","href","CardContent","Avatar","src","logo","gutterBottom","description","CardActions","IconButton","github","GitHub","projectImages","immunity","mtgcr","musiq","zps2020","Transition","ref","Slide","direction","TransitionComponent","React","forwardRef","closeButton","visitButton","ProjectInfo","Dialog","keepMounted","onClose","closer","image","DialogTitle","DialogContent","DialogContentText","languages","join","techniques","DialogActions","Close","height","ProjectCard","infoOpen","setInfoOpen","CardMedia","header","subheader","PortfolioSection","projectkey","projectCards","projects","Object","prototype","hasOwnProperty","call","projectobj","push","toolkey","toolCards","tools","toolobj","container","spacing","justifyContent","text","mainbuttons","sectionheader","divider","width","margin","MainPage","Box","alignItems","display","flexDirection","align","Divider","resume","InsertDriveFileOutlined","scrollToPortfolio","FolderOpen","navMap","ContactIcon","jumpSelector","PortfolioIcon","MobileOnly","Hidden","mdUp","children","DesktopOnly","smDown","white","palette","common","textcolor","primary","noDec","textDecoration","rightSide","marginLeft","spaceRight","navButton","Header","dispatch","DarkModeIcon","SunIcon","MoonIcon","navItems","map","point","clsx","scrollToElement","AppBar","position","barRef","Toolbar","edge","Menu","scrollToTop","padding","linkText","inactive","secondary","hidden","background","paper","MenuDrawer","ListItem","ListItemIcon","ListItemText","SwipeableDrawer","anchor","onOpen","List","lightThemeOptions","type","main","darkThemeOptions","typography","App","lightTheme","createTheme","darkTheme","responsiveFontSizes","scrollTo","top","left","behavior","selector","jumpElement","document","querySelector","distance","getBoundingClientRect","barOffset","offsetHeight","scrollBy","ThemeProvider","CssBaseline","Container","store","configureStore","reducer","globalReducer","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.723b39ac.chunk.js","sourcesContent":["/* eslint-disable */\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then((registration) => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch((error) => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: { 'Service-Worker': 'script' },\r\n    })\r\n        .then((response) => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then((registration) => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then((registration) => {\r\n                registration.unregister();\r\n            })\r\n            .catch((error) => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}\r\n","import React, {useState, useRef} from 'react';\r\n\r\nimport {\r\n    Button,\r\n    Tooltip,\r\n    makeStyles,\r\n    SvgIconTypeMap,\r\n} from '@material-ui/core';\r\nimport {OverridableComponent} from '@material-ui/core/OverridableComponent';\r\n\r\n// import {\r\n//     useAppSelector,\r\n//     useAppDispatch,\r\n// } from '../state/hooks';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    icon: {\r\n        marginRight: '0.5rem',\r\n    },\r\n}));\r\n\r\nconst tooltipDuration = 1000;\r\n\r\n// button to copy contents\r\nconst CopyButton = (props: {\r\n    icon: OverridableComponent<SvgIconTypeMap<{}, 'svg'>>,\r\n    contents: string,\r\n    variant?: 'contained' | 'outlined' | 'text',\r\n    size?: 'large' | 'medium' | 'small',\r\n    color?: 'default' | 'inherit' | 'primary' | 'secondary',\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const tooltipTimer = useRef<number | null>(0);\r\n    const [tooltipOpen, setTooltipOpen] = useState(false);\r\n\r\n    const displayTooltip = () => {\r\n\r\n        setTooltipOpen(true);\r\n        if (tooltipTimer.current !== null) {\r\n\r\n            clearTimeout(tooltipTimer.current);\r\n\r\n        }\r\n        tooltipTimer.current = window.setTimeout(\r\n            () => setTooltipOpen(false),\r\n            tooltipDuration,\r\n        );\r\n\r\n    };\r\n\r\n    const handleCopy = () => {\r\n\r\n        navigator.clipboard.writeText(props.contents).then(\r\n            displayTooltip,\r\n            displayTooltip,\r\n        );\r\n\r\n    };\r\n\r\n    return (\r\n        <Tooltip\r\n            title='Copied!'\r\n            arrow\r\n            open={tooltipOpen}\r\n        >\r\n            <Button\r\n                onClick={handleCopy}\r\n                style={{textTransform: 'none'}}\r\n                variant={props.variant}\r\n                size={props.size}\r\n                color={props.color}\r\n            >\r\n                <props.icon className={classes.icon} /> {props.contents}\r\n            </Button>\r\n        </Tooltip>\r\n    );\r\n\r\n};\r\n\r\nexport default CopyButton;\r\n","import {\r\n    TypedUseSelectorHook,\r\n    useDispatch,\r\n    useSelector,\r\n} from 'react-redux';\r\nimport type {\r\n    RootState,\r\n    AppDispatch,\r\n} from './store';\r\n\r\n// Typed redux hooks\r\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\r\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import {createSlice} from '@reduxjs/toolkit';\r\n\r\nimport {RootState} from './store';\r\n\r\n// Slice of global state\r\nexport interface GlobalState {\r\n    darkMode: boolean;\r\n    menuDrawerOpen: boolean;\r\n}\r\n\r\nconst initialState: GlobalState = {\r\n    darkMode: !localStorage.getItem('lightMode'),\r\n    menuDrawerOpen: false,\r\n};\r\n\r\nexport const globalSlice = createSlice({\r\n    name: 'global',\r\n    initialState,\r\n    reducers: {\r\n        // toggle the mode and save to localstorage\r\n        toggleDarkMode: (state) => {\r\n\r\n            state.darkMode = !state.darkMode;\r\n            localStorage.setItem('lightMode', state.darkMode ? '' : 'on');\r\n\r\n        },\r\n        openMenuDrawer: (state) => {\r\n\r\n            state.menuDrawerOpen = true;\r\n\r\n        },\r\n        closeMenuDrawer: (state) => {\r\n\r\n            state.menuDrawerOpen = false;\r\n\r\n        },\r\n    },\r\n});\r\n\r\n// extract actions\r\nexport const {toggleDarkMode, openMenuDrawer, closeMenuDrawer} = globalSlice.actions;\r\n\r\n// selectors\r\nexport const selectDarkMode = (state: RootState): boolean => state.global.darkMode;\r\nexport const selectMenuDrawerOpen = (state: RootState): boolean => state.global.menuDrawerOpen;\r\n\r\nexport default globalSlice.reducer;\r\n","import React from 'react';\r\n\r\nimport {\r\n    Typography,\r\n    ButtonGroup,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    MailOutline,\r\n    CallOutlined,\r\n} from '@material-ui/icons';\r\n\r\nimport CopyButton from '../components/CopyButton';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        paddingTop: '3rem',\r\n    },\r\n    contactbuttons: {\r\n        marginTop: '1rem',\r\n    },\r\n}));\r\n\r\nimport {useAppSelector} from '../state/hooks';\r\nimport {selectDarkMode} from '../state/globalSlice';\r\n\r\n// Contact section with email and phone\r\nconst ContactSection = (): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    // access dark mode info\r\n    const darkMode = useAppSelector(selectDarkMode);\r\n\r\n    return (\r\n        <>\r\n            <Typography\r\n                variant='h3'\r\n                className={classes.root}\r\n                id='contact'\r\n            >\r\n                Contact Info\r\n            </Typography>\r\n            <ButtonGroup\r\n                orientation='vertical'\r\n                className={classes.contactbuttons}\r\n                variant='text'\r\n                color={darkMode ? 'secondary' : 'primary'}\r\n            >\r\n                <CopyButton\r\n                    icon={MailOutline}\r\n                    contents='maddenfong@gmail.com'\r\n                    size='large'\r\n                />\r\n                <CopyButton\r\n                    icon={CallOutlined}\r\n                    contents='+1 415 810 0334'\r\n                    size='large'\r\n                />\r\n            </ButtonGroup>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default ContactSection;\r\n","// const importAll = (req: __WebpackModuleApi.RequireContext) => {\r\n\r\n//     const object: {[key: string]: string} = {};\r\n//     req.keys().forEach((item: string) => {\r\n\r\n//         const key = item.replace('./', '').\r\n//             replace(/_/gu, ' ');\r\n//         object[key] = req(item).default;\r\n\r\n//     });\r\n//     return object;\r\n\r\n// };\r\n\r\n// const toolLogos = importAll(require.context('./', false, /\\.(?<image>png|gif)$/u));\r\n\r\n// export default toolLogos;\r\n\r\nimport ds from './ds.png';\r\nimport js from './js.png';\r\nimport mc from './mc.png';\r\nimport mtg from './mtg.png';\r\n\r\nconst toolLogos: {[key: string]: string} = {\r\n    ds,\r\n    js,\r\n    mc,\r\n    mtg,\r\n};\r\n\r\nexport default toolLogos;\r\n","export default __webpack_public_path__ + \"static/media/ds.496e572a.png\";","export default __webpack_public_path__ + \"static/media/js.cae65a84.png\";","export default __webpack_public_path__ + \"static/media/mc.4d9fb16a.png\";","export default __webpack_public_path__ + \"static/media/mtg.21dfb186.png\";","import React from 'react';\r\n\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardActions,\r\n    CardActionArea,\r\n    Button,\r\n    IconButton,\r\n    Typography,\r\n    Grid,\r\n    Avatar,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    GitHub,\r\n} from '@material-ui/icons';\r\n\r\nimport general from '../data/general.json';\r\nimport toolLogos from '../data/tool_logos';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    card: {\r\n        // height: '100%',\r\n        maxWidth: '100%',\r\n    },\r\n    avatar: {\r\n        marginBottom: '1rem',\r\n    },\r\n}));\r\n\r\n// Card for displaying a tool\r\nconst ToolCard = (props: {\r\n    name: string,\r\n    info: {\r\n        description: string,\r\n        link: string,\r\n        github: string,\r\n        logo: string,\r\n    }\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const fullLink = `${general.page}/${props.info.link}`;\r\n\r\n    return (\r\n        <Grid\r\n            item\r\n            xs={12}\r\n            sm={6}\r\n            md={4}\r\n            lg={3}\r\n            className={classes.root}\r\n        >\r\n            <Card\r\n                className={classes.card}\r\n                raised\r\n            >\r\n                <CardActionArea href={fullLink}>\r\n                    <CardContent>\r\n                        <Avatar\r\n                            src={toolLogos[props.info.logo]}\r\n                            variant='rounded'\r\n                            className={classes.avatar}\r\n                        />\r\n                        <Typography variant='h5' gutterBottom>\r\n                            {props.name}\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {props.info.description}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Button\r\n                        href={fullLink}\r\n                    >\r\n                        Visit\r\n                    </Button>\r\n                    <IconButton href={props.info.github}>\r\n                        <GitHub />\r\n                    </IconButton>\r\n                </CardActions>\r\n            </Card>\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\nexport default ToolCard;\r\n","// const importAll = (req: __WebpackModuleApi.RequireContext) => {\r\n\r\n//     const object: {[key: string]: string} = {};\r\n//     req.keys().forEach((item: string) => {\r\n\r\n//         const key = item.replace('./', '').\r\n//             replace(/_/gu, ' ');\r\n//         object[key] = req(item).default;\r\n\r\n//     });\r\n//     return object;\r\n\r\n// };\r\n\r\n// const projectImages = importAll(require.context('./', false, /\\.(?<image>png|gif)$/u));\r\n\r\n// export default projectImages;\r\n\r\nimport immunity from './immunity.png';\r\nimport mtgcr from './mtgcr.png';\r\nimport musiq from './musiq.png';\r\nimport zps2020 from './zps2020.png';\r\n\r\nconst projectImages: {[key: string]: string} = {\r\n    immunity,\r\n    mtgcr,\r\n    musiq,\r\n    zps2020,\r\n};\r\n\r\nexport default projectImages;\r\n","export default __webpack_public_path__ + \"static/media/immunity.d92a1d88.png\";","export default __webpack_public_path__ + \"static/media/mtgcr.cfdd667f.png\";","export default __webpack_public_path__ + \"static/media/musiq.6c5a333c.png\";","export default __webpack_public_path__ + \"static/media/zps2020.7532ba99.png\";","import React from 'react';\r\n\r\nimport {\r\n    Slide,\r\n    SlideProps,\r\n    Dialog,\r\n    DialogTitle,\r\n    Button,\r\n    IconButton,\r\n    DialogActions,\r\n    DialogContent,\r\n    DialogContentText,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    GitHub,\r\n    Close,\r\n} from '@material-ui/icons';\r\n\r\nimport projectImages from '../data/project_images';\r\n\r\nconst Transition = (\r\n    props: JSX.IntrinsicAttributes & SlideProps,\r\n    ref: React.Ref<unknown> | undefined,\r\n) => <Slide direction='up' ref={ref} {...props} />;\r\nconst TransitionComponent = React.forwardRef(Transition);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    closeButton: {\r\n        // position: 'absolute',\r\n        // right: theme.spacing(1),\r\n        // top: theme.spacing(1),\r\n    },\r\n    visitButton: {\r\n        marginRight: '1rem',\r\n    },\r\n}));\r\n\r\n// info modal for projects\r\nconst ProjectInfo = (props: {\r\n    open: boolean,\r\n    name: string,\r\n    info: {\r\n        link: string,\r\n        github: string,\r\n        languages: string[],\r\n        techniques: string[],\r\n        description: string,\r\n        image: string,\r\n    },\r\n    closer: () => void,\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Dialog\r\n            open={props.open}\r\n            TransitionComponent={TransitionComponent}\r\n            keepMounted\r\n            onClose={props.closer}\r\n            className={classes.root}\r\n        >\r\n            <img src={projectImages[props.info.image]} />\r\n            <DialogTitle>\r\n                {props.name}\r\n            </DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText>\r\n                    {props.info.description}\r\n                </DialogContentText>\r\n                <DialogContentText>\r\n                    <b>Languages:</b>&nbsp;\r\n                    {props.info.languages.join(', ')}\r\n                </DialogContentText>\r\n                <DialogContentText>\r\n                    <b>Techniques:</b>&nbsp;\r\n                    {props.info.techniques.join(', ')}\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    href={props.info.link}\r\n                    color='primary'\r\n                    variant='contained'\r\n                    className={classes.visitButton}\r\n                >\r\n                    Visit\r\n                </Button>\r\n                <IconButton href={props.info.github}>\r\n                    <GitHub />\r\n                </IconButton>\r\n                <IconButton\r\n                    onClick={props.closer}\r\n                    color='secondary'\r\n                    className={classes.closeButton}\r\n                >\r\n                    <Close />\r\n                </IconButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n\r\n};\r\n\r\nexport default ProjectInfo;\r\n","import React, {useState} from 'react';\r\n\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    CardActions,\r\n    CardActionArea,\r\n    CardMedia,\r\n    Typography,\r\n    Grid,\r\n    Button,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\n\r\nimport ProjectInfo from './ProjectInfo';\r\nimport projectImages from '../data/project_images';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    card: {\r\n        // height: '100%',\r\n        maxWidth: '100%',\r\n    },\r\n    image: {\r\n        height: '10rem',\r\n    },\r\n}));\r\n\r\n// Card for displaying a project\r\nconst ProjectCard = (props: {\r\n    name: string,\r\n    info: {\r\n        link: string,\r\n        github: string,\r\n        languages: string[],\r\n        techniques: string[],\r\n        description: string,\r\n        image: string,\r\n    },\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [infoOpen, setInfoOpen] = useState(false);\r\n\r\n    return (\r\n        <Grid\r\n            item\r\n            xs={12}\r\n            sm={12}\r\n            md={6}\r\n            lg={4}\r\n            className={classes.root}\r\n        >\r\n            <Card\r\n                className={classes.card}\r\n                raised\r\n            >\r\n                <CardActionArea\r\n                    onClick={() => setInfoOpen(true)}\r\n                >\r\n                    <CardMedia\r\n                        className={classes.image}\r\n                        image={projectImages[props.info.image]}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography variant='h5' gutterBottom>\r\n                            {props.name}\r\n                        </Typography>\r\n                        <Typography color='textSecondary'>\r\n                            {props.info.description}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Button\r\n                        href={props.info.link}\r\n                    >\r\n                        Visit\r\n                    </Button>\r\n                    <Button onClick={() => setInfoOpen(true)}>\r\n                        More Info\r\n                    </Button>\r\n                </CardActions>\r\n            </Card>\r\n            <ProjectInfo\r\n                open={infoOpen}\r\n                name={props.name}\r\n                info={props.info}\r\n                closer={() => setInfoOpen(false)}\r\n            />\r\n        </Grid>\r\n    );\r\n\r\n};\r\n\r\nexport default ProjectCard;\r\n","import React from 'react';\r\n\r\nimport {\r\n    Typography,\r\n    Grid,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\n\r\nimport ToolCard from '../components/ToolCard';\r\nimport ProjectCard from '../components/ProjectCard';\r\nimport tools from '../data/tools.json';\r\nimport projects from '../data/projects.json';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    header: {\r\n        paddingTop: '3rem',\r\n    },\r\n    subheader: {\r\n        marginTop: '3rem',\r\n        marginBottom: '1.5rem',\r\n    },\r\n}));\r\n\r\n// Portfolio section showing off other projects\r\nconst PortfolioSection = (props: {}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    // generate cards for projects\r\n    const projectCards: JSX.Element[] = [];\r\n    let projectkey: keyof typeof projects;\r\n    for (projectkey in projects) {\r\n\r\n        if (Object.prototype.hasOwnProperty.call(projects, projectkey)) {\r\n\r\n            const projectobj = projects[projectkey];\r\n            projectCards.push(<ProjectCard key={projectkey} name={projectkey} info={projectobj} />);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    // generate cards for tools\r\n    const toolCards: JSX.Element[] = [];\r\n    let toolkey: keyof typeof tools;\r\n    for (toolkey in tools) {\r\n\r\n        if (Object.prototype.hasOwnProperty.call(tools, toolkey)) {\r\n\r\n            const toolobj = tools[toolkey];\r\n            toolCards.push(<ToolCard key={toolkey} name={toolkey} info={toolobj} />);\r\n\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography\r\n                variant='h3'\r\n                className={classes.header}\r\n                id='portfolio'\r\n            >\r\n                Portfolio\r\n            </Typography>\r\n            <Typography\r\n                variant='h4'\r\n                className={classes.subheader}\r\n            >\r\n                Projects\r\n            </Typography>\r\n            <Grid\r\n                container\r\n                spacing={3}\r\n                justifyContent='center'\r\n            >\r\n                {projectCards}\r\n            </Grid>\r\n            <Typography\r\n                variant='h4'\r\n                className={classes.subheader}\r\n            >\r\n                Tools\r\n            </Typography>\r\n            <Grid\r\n                container\r\n                spacing={3}\r\n                justifyContent='center'\r\n            >\r\n                {toolCards}\r\n            </Grid>\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default PortfolioSection;\r\n","export default __webpack_public_path__ + \"static/media/dakotamaddenfong_resume.87e99df6.pdf\";","import React from 'react';\r\n\r\nimport {\r\n    Box,\r\n    Typography,\r\n    Divider,\r\n    Button,\r\n    ButtonGroup,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    FolderOpen,\r\n    InsertDriveFileOutlined,\r\n    GitHub,\r\n} from '@material-ui/icons';\r\n\r\nimport ContactSection from '../PortfolioSection/ContactSection';\r\nimport PortfolioSection from '../PortfolioSection/PortfolioSection';\r\nimport general from '../data/general.json';\r\nimport resume from '../tex/dakotamaddenfong_resume.pdf';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '3rem',\r\n    },\r\n    text: {\r\n        marginTop: '3rem',\r\n    },\r\n    mainbuttons: {\r\n        marginTop: '3rem',\r\n    },\r\n    sectionheader: {\r\n        marginTop: '2rem',\r\n    },\r\n    contactbuttons: {\r\n        marginTop: '1rem',\r\n    },\r\n    divider: {\r\n        width: '50%',\r\n        margin: '10px',\r\n    },\r\n    icon: {\r\n        marginRight: '0.5rem',\r\n    },\r\n    subheader: {\r\n        marginTop: '3rem',\r\n        marginBottom: '1.5rem',\r\n    },\r\n}));\r\n\r\n// main index page for empty route\r\nconst MainPage = (props: {\r\n    scrollToPortfolio: () => void,\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Box\r\n            alignItems='center'\r\n            display='flex'\r\n            flexDirection='column'\r\n            className={classes.root}\r\n        >\r\n            <Typography variant='h2' align='center'>\r\n                Dakota Madden-Fong\r\n            </Typography>\r\n            <Divider\r\n                variant='fullWidth'\r\n                className={classes.divider}\r\n            />\r\n            <Typography variant='h2' align='center'>\r\n                TrifectaIII\r\n            </Typography>\r\n\r\n            <Typography\r\n                variant='body1'\r\n                className={classes.text}\r\n                align='center'\r\n            >\r\n                A coder living and working in San Francisco, CA.\r\n                I focus on software and web development.\r\n            </Typography>\r\n\r\n            <ButtonGroup\r\n                orientation='vertical'\r\n                className={classes.mainbuttons}\r\n                variant='contained'\r\n                size='large'\r\n            >\r\n                <Button\r\n                    href={resume}\r\n                    color='primary'\r\n                >\r\n                    <InsertDriveFileOutlined className={classes.icon} /> Resume\r\n                </Button>\r\n                <Button\r\n                    onClick={props.scrollToPortfolio}\r\n                    color='secondary'\r\n                >\r\n                    <FolderOpen className={classes.icon} />  Portfolio\r\n                </Button>\r\n                <Button\r\n                    href={general.github}\r\n                    color='primary'\r\n                >\r\n                    <GitHub className={classes.icon} />  GitHub\r\n                </Button>\r\n            </ButtonGroup>\r\n\r\n            <ContactSection />\r\n\r\n            <PortfolioSection />\r\n\r\n        </Box>\r\n    );\r\n\r\n};\r\n\r\nexport default MainPage;\r\n","import {SvgIconTypeMap} from '@material-ui/core';\r\nimport {OverridableComponent} from '@material-ui/core/OverridableComponent';\r\nimport {\r\n    Call as ContactIcon,\r\n    FolderOpen as PortfolioIcon,\r\n} from '@material-ui/icons';\r\n\r\nexport interface NavPoint {\r\n    name: string,\r\n    icon: OverridableComponent<SvgIconTypeMap<{}, 'svg'>>,\r\n    jumpSelector: string,\r\n}\r\n\r\n// Type to determine navigation options on header\r\nexport type NavMapType = NavPoint[];\r\n\r\n// navmap for this app\r\nexport const navMap: NavMapType = [\r\n    {\r\n        name: 'Contact',\r\n        icon: ContactIcon,\r\n        jumpSelector: '#contact',\r\n    },\r\n    {\r\n        name: 'Portfolio',\r\n        icon: PortfolioIcon,\r\n        jumpSelector: '#portfolio',\r\n    },\r\n];\r\n","import React from 'react';\r\n\r\nimport {Hidden} from '@material-ui/core';\r\n\r\n// wrapper components for mobile-only or desktop-only elements\r\nexport const MobileOnly = (props: {\r\n    children: React.ReactNode,\r\n}): JSX.Element => <Hidden mdUp>{props.children}</Hidden>;\r\nexport const DesktopOnly = (props: {\r\n    children: React.ReactNode,\r\n}): JSX.Element => <Hidden smDown>{props.children}</Hidden>;\r\n","import React from 'react';\r\n\r\nimport {\r\n    Button,\r\n    AppBar,\r\n    Box,\r\n    Toolbar,\r\n    Typography,\r\n    IconButton,\r\n    Tooltip,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    Brightness3 as MoonIcon,\r\n    Brightness7 as SunIcon,\r\n    Menu as MenuIcon,\r\n} from '@material-ui/icons';\r\nimport clsx from 'clsx';\r\n\r\nimport {NavPoint, navMap} from '../Navigation';\r\nimport {\r\n    MobileOnly,\r\n    DesktopOnly,\r\n} from './helpers';\r\nimport {\r\n    useAppSelector,\r\n    useAppDispatch,\r\n} from '../state/hooks';\r\nimport {\r\n    selectDarkMode,\r\n    toggleDarkMode,\r\n    openMenuDrawer,\r\n} from '../state/globalSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n\r\n    },\r\n    white: {\r\n        color: theme.palette.common.white,\r\n    },\r\n    textcolor: {\r\n        color: theme.palette.text.primary,\r\n    },\r\n    noDec: {\r\n        textDecoration: 'none',\r\n    },\r\n    rightSide: {\r\n        marginLeft: 'auto',\r\n    },\r\n    spaceRight: {\r\n        marginRight: '0.5rem',\r\n    },\r\n    navButton: {\r\n        color: theme.palette.common.white,\r\n        textTransform: 'none',\r\n        marginRight: '1rem',\r\n    },\r\n}));\r\n\r\n// Main page header for navigation, global state\r\nconst Header = (props: {\r\n    scrollToTop: () => void,\r\n    scrollToElement: (selector: string) => void,\r\n    barRef: React.MutableRefObject<HTMLElement | null>,\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useAppDispatch();\r\n    const darkMode = useAppSelector(selectDarkMode);\r\n\r\n    const DarkModeIcon = darkMode ? SunIcon : MoonIcon;\r\n\r\n    // generate jumplinks for navitems\r\n    const navItems = navMap.map((point: NavPoint): JSX.Element => <div\r\n        className={clsx(\r\n            classes.white,\r\n            classes.noDec,\r\n        )}\r\n        key={point.name}\r\n    >\r\n        <Button\r\n            className={classes.navButton}\r\n            onClick={() => props.scrollToElement(point.jumpSelector)}\r\n        >\r\n            <point.icon className={classes.spaceRight} />\r\n            <Typography variant='body1'>\r\n                {point.name}\r\n            </Typography>\r\n        </Button>\r\n    </div>);\r\n\r\n    return (\r\n        <>\r\n            <AppBar\r\n                position='fixed'\r\n                className={classes.root}\r\n                ref={props.barRef}\r\n            >\r\n                <Toolbar>\r\n\r\n                    <MobileOnly>\r\n\r\n                        <IconButton\r\n                            edge='start'\r\n                            className={classes.white}\r\n                            onClick={() => dispatch(openMenuDrawer())}\r\n                        >\r\n                            <MenuIcon color='inherit' />\r\n                        </IconButton>\r\n\r\n                    </MobileOnly>\r\n\r\n                    <div\r\n                        className={clsx(\r\n                            classes.noDec,\r\n                            classes.white,\r\n                        )}\r\n                    >\r\n                        <Button\r\n                            className={classes.navButton}\r\n                            onClick={props.scrollToTop}\r\n                        >\r\n                            <Typography variant='h5'>\r\n                                Dakota Madden-Fong\r\n                            </Typography>\r\n                        </Button>\r\n                    </div>\r\n\r\n                    <DesktopOnly>\r\n                        <Box\r\n                            display='flex'\r\n                        >\r\n                            {navItems}\r\n                        </Box>\r\n                    </DesktopOnly>\r\n\r\n                    {/* right side */}\r\n                    <Tooltip\r\n                        title={darkMode ? 'Light Mode' : 'Dark Mode'}\r\n                        className={classes.rightSide}\r\n                    >\r\n                        <IconButton\r\n                            edge='end'\r\n                            className={classes.white}\r\n                            onClick={() => dispatch(toggleDarkMode())}\r\n                        >\r\n                            <DarkModeIcon />\r\n                        </IconButton>\r\n                    </Tooltip>\r\n\r\n                </Toolbar>\r\n            </AppBar>\r\n            {/* toolbar for ofsetting page elements */}\r\n            <Toolbar />\r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nimport {\r\n    Box,\r\n    SwipeableDrawer,\r\n    List,\r\n    ListItem,\r\n    ListItemIcon,\r\n    ListItemText,\r\n    makeStyles,\r\n} from '@material-ui/core';\r\nimport {\r\n    VerticalAlignTop as TopIcon,\r\n} from '@material-ui/icons';\r\n\r\nimport {NavPoint, navMap} from '../Navigation';\r\nimport {MobileOnly} from './helpers';\r\nimport {\r\n    useAppSelector,\r\n    useAppDispatch,\r\n} from '../state/hooks';\r\nimport {\r\n    selectMenuDrawerOpen,\r\n    openMenuDrawer,\r\n    closeMenuDrawer,\r\n} from '../state/globalSlice';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        padding: '1rem',\r\n    },\r\n    linkText: {\r\n        textDecoration: 'none',\r\n        color: theme.palette.text.primary,\r\n        '&:hover': {\r\n            textDecoration: 'underline',\r\n        },\r\n    },\r\n    inactive: {\r\n        color: theme.palette.text.secondary,\r\n    },\r\n    hidden: {\r\n        color: theme.palette.background.paper,\r\n    },\r\n}));\r\n\r\n// drawer for navigation on mobile view\r\nconst MenuDrawer = (props: {\r\n    scrollToTop: () => void,\r\n    scrollToElement: (selector: string) => void,\r\n}): JSX.Element => {\r\n\r\n    const classes = useStyles();\r\n\r\n    const dispatch = useAppDispatch();\r\n\r\n    const open = useAppSelector(selectMenuDrawerOpen);\r\n\r\n    // generate jumplinks for navitems\r\n    const navItems = navMap.map((point: NavPoint): JSX.Element => <div\r\n        className={classes.linkText}\r\n        onClick={() => dispatch(closeMenuDrawer())}\r\n        key={point.name}\r\n    >\r\n        <ListItem\r\n            onClick={() => props.scrollToElement(point.jumpSelector)}\r\n        >\r\n            <ListItemIcon>\r\n                <point.icon />\r\n            </ListItemIcon>\r\n            <ListItemText primary={point.name} />\r\n        </ListItem>\r\n    </div>);\r\n\r\n    return (\r\n        <MobileOnly>\r\n            <SwipeableDrawer\r\n                anchor='left'\r\n                open={open}\r\n                onOpen={() => dispatch(openMenuDrawer())}\r\n                onClose={() => dispatch(closeMenuDrawer())}\r\n            >\r\n                <Box className={classes.root}>\r\n                    <List>\r\n                        {/* home item */}\r\n                        <div\r\n                            className={classes.linkText}\r\n                            onClick={() => dispatch(closeMenuDrawer())}\r\n                        >\r\n                            <ListItem\r\n                                onClick={props.scrollToTop}\r\n                            >\r\n                                <ListItemIcon>\r\n                                    <TopIcon />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary='Top' />\r\n                            </ListItem>\r\n                        </div>\r\n                        {navItems}\r\n                    </List>\r\n                </Box>\r\n            </SwipeableDrawer>\r\n        </MobileOnly>\r\n    );\r\n\r\n};\r\n\r\nexport default MenuDrawer;\r\n","import React, {useRef} from 'react';\r\n\r\nimport {\r\n    Container,\r\n    CssBaseline,\r\n    ThemeProvider,\r\n    createTheme,\r\n    ThemeOptions,\r\n    responsiveFontSizes,\r\n} from '@material-ui/core';\r\n\r\nimport Main from './pages/MainPage';\r\nimport Header from './components/Header';\r\nimport MenuDrawer from './components/MenuDrawer';\r\nimport {useAppSelector} from './state/hooks';\r\nimport {selectDarkMode} from './state/globalSlice';\r\n\r\n// set up dark and light themes\r\n// https://material-ui.com/customization/color/#playground\r\nconst lightThemeOptions: ThemeOptions = {\r\n    palette: {\r\n        type: 'light',\r\n        primary: {\r\n            main: '#794BC4',\r\n        },\r\n        secondary: {\r\n            main: '#e65100',\r\n        },\r\n    },\r\n};\r\nconst darkThemeOptions: ThemeOptions = {\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: '#794BC4',\r\n        },\r\n        secondary: {\r\n            main: '#e65100',\r\n        },\r\n    },\r\n    typography: {\r\n\r\n    },\r\n};\r\n\r\n// Main App component\r\nconst App = (): JSX.Element => {\r\n\r\n    // choose theme based on state\r\n    const darkMode = useAppSelector(selectDarkMode);\r\n    const lightTheme = createTheme(lightThemeOptions);\r\n    const darkTheme = createTheme(darkThemeOptions);\r\n    const theme = responsiveFontSizes(darkMode ? darkTheme : lightTheme);\r\n\r\n    // ref for top appbar, used to calculate scroll offsets\r\n    const barRef = useRef<null | HTMLElement>(null);\r\n\r\n    // function for scrolling to the top of the page\r\n    const scrollToTop = () => {\r\n\r\n        window.scrollTo({\r\n            top: 0,\r\n            left: 0,\r\n            behavior: 'smooth',\r\n        });\r\n\r\n    };\r\n\r\n    // function to scroll to a specific selector (used by navmap code)\r\n    const scrollToElement = (selector: string) => {\r\n\r\n        const jumpElement: HTMLElement | null = document.querySelector(selector);\r\n        const distance = jumpElement?.getBoundingClientRect().top || 0;\r\n        const barOffset = barRef.current?.offsetHeight || 0;\r\n        window.scrollBy({\r\n            top: distance - barOffset,\r\n            left: 0,\r\n            behavior: 'smooth',\r\n        });\r\n\r\n    };\r\n\r\n    // function to handle scrollin to portfolio\r\n    const scrollToPortfolio = () => {\r\n\r\n        scrollToElement('#portfolio');\r\n\r\n    };\r\n\r\n    return (\r\n        // provider theme\r\n        <ThemeProvider theme={theme}>\r\n\r\n            {/* normalize css */}\r\n            <CssBaseline />\r\n\r\n            <Header\r\n                scrollToTop={scrollToTop}\r\n                scrollToElement={scrollToElement}\r\n                barRef={barRef}\r\n            />\r\n            <MenuDrawer\r\n                scrollToTop={scrollToTop}\r\n                scrollToElement={scrollToElement}\r\n            />\r\n            <Container>\r\n                <Main\r\n                    scrollToPortfolio={scrollToPortfolio}\r\n                />\r\n            </Container>\r\n        </ThemeProvider>\r\n    );\r\n\r\n};\r\n\r\nexport default App;\r\n","import {\r\n    configureStore,\r\n    ThunkAction,\r\n    Action,\r\n} from '@reduxjs/toolkit';\r\n\r\nimport globalReducer from './globalSlice';\r\n\r\n// Store containing all state slices\r\nexport const store = configureStore({\r\n    reducer: {\r\n        global: globalReducer,\r\n    },\r\n});\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n    ReturnType,\r\n    RootState,\r\n    unknown,\r\n    Action<string>\r\n>;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\nimport {store} from './state/store';\r\n\r\n// Entry point for app\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        {/* Provide redux store */}\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root'),\r\n);\r\n\r\n/*\r\n * If you want your app to work offline and load faster, you can change\r\n * unregister() to register() below. Note this comes with some pitfalls.\r\n * Learn more about service workers: https://bit.ly/CRA-PWA\r\n */\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}